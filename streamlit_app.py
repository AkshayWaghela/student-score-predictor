# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yliw37tjUJlRMQtqMBCSS3pFgZbuqfEF
"""

# ================================
# Step 1: Import Libraries
# ================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ================================
# Step 2: Load Data
# ================================
url = "http://bit.ly/w-data"
data = pd.read_csv(url)

print("Data Preview:")
print(data.head())

# ================================
# Step 3: EDA
# ================================
plt.figure(figsize=(6,4))
sns.scatterplot(x="Hours", y="Scores", data=data, s=80, color="blue")
plt.title("Study Hours vs Percentage Score")
plt.xlabel("Hours Studied")
plt.ylabel("Score (%)")
plt.show()

print("\nCorrelation Matrix:")
print(data.corr())

# ================================
# Step 4: Train-Test Split
# ================================
X = data[['Hours']].values
y = data['Scores'].values

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ================================
# Step 5: Model Training
# ================================
model = LinearRegression()
model.fit(X_train, y_train)

print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_[0]}")

# ================================
# Step 6: Predictions
# ================================
y_pred = model.predict(X_test)

# Evaluate
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"\nModel Performance:")
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# ================================
# Step 7: Visualization
# ================================
plt.figure(figsize=(6,4))
plt.scatter(X, y, color="blue", label="Actual Data")
plt.plot(X, model.predict(X), color="red", linewidth=2, label="Regression Line")
plt.title("Regression Line - Hours vs Scores")
plt.xlabel("Hours Studied")
plt.ylabel("Score (%)")
plt.legend()
plt.show()

# ================================
# Step 8: Custom Prediction
# ================================
hours = 9.25
predicted_score = model.predict([[hours]])[0]
print(f"\nPredicted score for {hours} study hours = {predicted_score:.2f}%")


# streamlit_app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# ================================
# Load Data
# ================================
url = "http://bit.ly/w-data"
data = pd.read_csv(url)

X = data[['Hours']].values
y = data['Scores'].values

# Train Model
model = LinearRegression()
model.fit(X, y)

# ================================
# Streamlit UI
# ================================
st.title("ðŸ“š Student Score Predictor")
st.write("A simple ML app to predict student performance based on study hours.")

# Sidebar
st.sidebar.header("User Input")
hours = st.sidebar.slider("Hours studied per day", 0.0, 12.0, 5.0, 0.25)

# Prediction
predicted_score = model.predict([[hours]])[0]

st.subheader("Prediction")
st.write(f"If a student studies for **{hours:.2f} hours/day**, "
         f"the predicted score is **{predicted_score:.2f}%**.")

# ================================
# Data Visualization
# ================================
st.subheader("Data & Regression Line")

fig, ax = plt.subplots(figsize=(6,4))
ax.scatter(X, y, color="blue", label="Actual Data")
ax.plot(X, model.predict(X), color="red", linewidth=2, label="Regression Line")
ax.scatter(hours, predicted_score, color="green", s=100, label="Your Prediction")
ax.set_xlabel("Hours Studied")
ax.set_ylabel("Score (%)")
ax.legend()
st.pyplot(fig)



